import java.nio.file.Files
import java.security.MessageDigest

plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "nini22p.iris"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = "27.0.12077973"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "nini22p.iris"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    signingConfigs {
        release {
            //keyAlias = keystoreProperties['keyAlias']
            //keyPassword = keystoreProperties['keyPassword']
            //storeFile = keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            //storePassword = keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            // signingConfig = signingConfigs.release
        }
    }
}

flutter {
    source = "../.."
}


task downloadFiles(type: Exec) {
    def filesToDownload = [
        [
            "url": "https://github.com/notofonts/noto-cjk/raw/refs/heads/main/Sans/OTF/SimplifiedChinese/NotoSansCJKsc-Medium.otf",
            "md5": "58c83279d990b2cf88d40a0a34832e31",
            "destination": file("./src/main/assets/flutter_assets/assets/fonts/NotoSansCJKsc-Medium.otf")
        ]
    ]

    filesToDownload.each { fileInfo ->
        def destFile = fileInfo.destination

        if (destFile.exists()) {
           def calculatedMD5 = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destFile.toPath())).encodeHex().toString()

            if (calculatedMD5 != fileInfo.md5) {
                destFile.delete()
                println "MD5 mismatch. File deleted: ${destFile}"
            }
        }

        if (!destFile.exists()) {
             destFile.parentFile.mkdirs()
            println "Downloading file from: ${fileInfo.url}"
            destFile.withOutputStream { os ->
                os << new URL(fileInfo.url).openStream()
            }

             def calculatedMD5 = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destFile.toPath())).encodeHex().toString()
            if (calculatedMD5 != fileInfo.md5) {
                throw new GradleException("MD5 verification failed for ${destFile}")
            }
        }
    }
}

assemble.dependsOn(downloadFiles)